// Generated by CoffeeScript 1.7.1
(function() {
  var Backbone, CollectionExposerGeneric, CollectionExposerHttpFancy, CollectionExposerHttpRaw, Select, Validator, async, callbackToRes, errDataToRes, helpers, subscriptionMan, v, _;

  helpers = require('helpers');

  Backbone = require('backbone4000');

  _ = require('underscore');

  async = require('async');

  Validator = require('validator2-extras');

  v = Validator.v;

  Select = Validator.Select;

  callbackToRes = function(res) {
    return function(err, data) {
      if (err != null ? err.name : void 0) {
        err = err.name;
      }
      return res.end(JSON.stringify({
        err: err,
        data: data
      }));
    };
  };

  errDataToRes = function(res, err, data) {
    if (err != null ? err.name : void 0) {
      err = err.name;
    }
    return res.end(JSON.stringify({
      err: err,
      data: data
    }));
  };

  CollectionExposerHttpRaw = exports.CollectionExposerHttpRaw = Validator.ValidatedModel.extend4000({
    validator: {
      path: 'String',
      app: 'Function',
      collection: 'Instance'
    },
    initialize: function() {
      var app, c, name, path;
      path = this.get('path');
      app = this.get('app');
      c = this.get('collection');
      name = c.get('name');
      app.post(helpers.makePath(path, name, 'create'), function(req, res) {
        return c.create(req.body.data, callbackToRes(res));
      });
      app.post(helpers.makePath(path, name, 'remove'), function(req, res) {
        return c.remove(req.body.pattern, callbackToRes(res));
      });
      app.post(helpers.makePath(path, name, 'update'), function(req, res) {
        return c.update(req.body.pattern, req.body.data, callbackToRes(res));
      });
      app.post(helpers.makePath(path, name, 'findOne'), function(req, res) {
        return c.findOne(req.body.pattern, function(err, data) {
          return errDataToRes(res, err, data);
        });
      });
      app.post(helpers.makePath(path, name, 'call'), function(req, res) {
        return c.fcall(req.body["function"], req.body.args || [], req.body.pattern, void 0, function(err, data) {
          return errDataToRes(res, err, data);
        });
      });
      return app.post(helpers.makePath(path, name, 'find'), function(req, res) {
        var reslist;
        reslist = [];
        return c.find(req.body.pattern, req.body.limits, function(err, data) {
          return reslist.push(data);
        }, function() {
          return res.end(JSON.stringify(reslist));
        });
      });
    }
  });

  CollectionExposerHttpFancy = exports.CollectionExposerHttpFancy = Validator.ValidatedModel.extend4000({
    validator: {
      path: 'String',
      app: 'Function',
      collection: 'Instance',
      realm: v().or('Object', 'String', 'Function')
    },
    initialize: function() {
      var app, c, getRealm, name, path, realm;
      path = this.get('path');
      app = this.get('app');
      c = this.get('collection');
      name = c.get('name');
      realm = this.get('realm');
      getRealm = function(req, callback) {
        if (realm.constructor !== Function) {
          return callback(null, realm);
        }
        return realm(req, callback);
      };
      app.post(helpers.makePath(path, name, 'create'), function(req, res) {
        return getRealm(req, function(err, realm) {
          return c.createModel(req.body.data, realm, function(err, data) {
            return callbackToRes(res)(err, data);
          });
        });
      });
      app.post(helpers.makePath(path, name, 'remove'), function(req, res) {
        return c.removeModel(req.body.pattern, callbackToRes(res));
      });
      app.post(helpers.makePath(path, name, 'update'), (function(_this) {
        return function(req, res) {
          return getRealm(req, function(err, realm) {
            if (err) {
              return res.end(JSON.stringify({
                err: err,
                data: data
              }));
            }
            return c.updateModel(req.body.pattern, req.body.data, realm, function(err, data) {
              return errDataToRes(res, err, data);
            });
          });
        };
      })(this));
      app.post(helpers.makePath(path, name, 'find'), (function(_this) {
        return function(req, res) {
          var reslist, verbose;
          reslist = [];
          verbose = false;
          if (req.body.pattern['owner._r']) {
            verbose = true;
          }
          return c.findModels(req.body.pattern, req.body.limits, function(err, model) {
            return reslist.push(model);
          }, function() {
            var flist;
            flist = _.map(reslist, function(model) {
              return function(callback) {
                return model.render(req, callback, verbose);
              };
            });
            return async.parallel(flist, function(err, data) {
              return res.end(JSON.stringify(data));
            });
          });
        };
      })(this));
      app.post(helpers.makePath(path, name, 'findOne'), (function(_this) {
        return function(req, res) {
          return c.findModel(req.body.pattern, function(err, model) {
            if (err || !model) {
              return res.end(JSON.stringify({
                err: err,
                data: model
              }));
            }
            return model.render(req, function(err, data) {
              return res.end(JSON.stringify({
                err: err,
                data: data
              }));
            });
          });
        };
      })(this));
      return app.post(helpers.makePath(path, name, 'call'), function(req, res) {
        return c.fcall(req.body["function"], req.body.args || [], req.body.pattern, void 0, function(err, data) {
          return res.end(JSON.stringify({
            err: err,
            data: data
          }));
        });
      });
    }
  });

  subscriptionMan = require('subscriptionman2');

  CollectionExposerGeneric = exports.CollectionExposerGeneric = Validator.ValidatedModel.extend4000({
    validator: {
      collection: 'Instance'
    },
    initialize: function() {
      var c;
      callbackToRes = function(res) {
        return function(err, data) {
          if (err != null ? err.name : void 0) {
            err = err.name;
          }
          return res.end({
            err: err,
            data: data
          });
        };
      };
      c = this.get('collection');
      this.subscribe({
        create: Object
      }, function(msg, res, realm) {
        return c.createModel(msg.create, realm, callbackToRes(res));
      });
      this.subscribe({
        remove: Object
      }, function(msg, res, realm) {
        return c.removeModel(msg.remove, realm, callbackToRes(res));
      });
      this.subscribe({
        update: Object,
        data: Object
      }, function(msg, res, realm) {
        return c.updateModel(msg.update, msg.data, realm, callbackToRes(res));
      });
      this.subscribe({
        findOne: Object
      }, function(msg, res, realm) {
        return c.findModel(msg.findOne, realm, callbackToRes(res));
      });
      this.subscribe({
        call: String,
        args: v()["default"]([]).Array()
      }, function(msg, res, realm) {
        return c.fcall(msg.call, msg.args, realm, callbackToRes(res));
      });
      return this.subscribe({
        find: Object
      }, (function(_this) {
        return function(msg, res, realm) {
          var bucket, endCb;
          bucket = new helpers.parallelBucket();
          endCb = bucket.cb();
          c.findModels(msg.find, msg.limits || {}, (function(err, model) {
            var bucketCallback;
            bucketCallback = bucket.cb();
            return model.render(realm, function(err, data) {
              if (!err) {
                res.write(data);
              }
              return bucketCallback();
            });
          }), (function(err, data) {
            return endCb();
          }));
          return bucket.done(err, data)(function() {
            return res.end();
          });
        };
      })(this));
    }
  });

}).call(this);
